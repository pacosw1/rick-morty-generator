{"version":3,"sources":["views/generator/components/main/graphql/queries.js","views/generator/components/main/elements.js","views/generator/components/spinner/Spinner.js","views/generator/components/history/elements.js","views/generator/components/history/index.js","views/generator/components/character/index.js","views/generator/components/main/index.js","components/wrapper/queries.js","components/wrapper/index.js","index.js"],"names":["gql","require","GET_CHARACTER","Wrapper","styled","div","FlexContainer","SpinDiv","Empty","h1","GenerateButton","button","props","disabled","SpinnerIcon","Container","Spinner","spin360","keyframes","HistoryHeader","HistoryContainer","Image","img","LeftSection","RightSection","ViewButton","active","Name","History","children","HistoryItem","name","image","id","selectCharacter","src","onClick","ImageWrapper","InfoSection","InfoRow","underline","InfoData","p","InfoHeader","InfoItem","header","value","valueFieldReducer","CharacterDisplay","status","species","prevImg","type","gender","origin","loading","location","character","created","InfoSectionContainer","NameHeader","InfoContainer","Generator","characterCount","useState","history","setHistory","cache","setCache","setCharacter","useLazyQuery","getCharacter","error","data","scrollTop","window","scrollTo","top","behavior","useEffect","prev","copy","unshift","fetchCharacter","console","log","totalCharacters","Math","floor","random","variables","historyItems","map","index","key","GET_CHAR_COUNT","useQuery","characters","info","count","client","ApolloClient","uri","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f2af41e.chunk.js","sourcesContent":["const { gql } = require(\"@apollo/client\");\r\n\r\nconst GET_CHARACTER = gql`\r\n  query CharacterDetails($id: ID!) {\r\n    character(id: $id) {\r\n      name\r\n      id\r\n      status\r\n      species\r\n      type\r\n      gender\r\n      image\r\n      origin {\r\n        name\r\n      }\r\n      location {\r\n        name\r\n      }\r\n      created\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_CHAR_COUNT = gql`\r\n  query {\r\n    characters {\r\n      info {\r\n        pages\r\n        count\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport { GET_CHARACTER, GET_CHAR_COUNT };\r\n","import styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding: 2rem 0;\r\n`;\r\n\r\nconst FlexContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 90%;\r\n  max-width: 1200px;\r\n`;\r\n\r\nconst SpinDiv = styled.div`\r\n  display: flex;\r\n  padding-top: 2rem;\r\n`;\r\n\r\nconst Empty = styled.h1`\r\n  font-family: \"Titillium web\", sans-serif;\r\n  font-size: 1.5rem;\r\n`;\r\n\r\nconst GenerateButton = styled.button`\r\n  height: 3.5rem;\r\n  width: 9rem;\r\n  padding: 1rem;\r\n  font-family: \"Titillium web\", sans-serif;\r\n  font-weight: 600;\r\n  color: white;\r\n\r\n  font-size: 0.8rem;\r\n  letter-spacing: 1.5px;\r\n\r\n  background-color: ${(props) =>\r\n    props.disabled ? \"rgba(209, 209, 209, .5)\" : \"rgb(181,91,255)\"};\r\n  border-radius: 0.2rem;\r\n  appearance: none;\r\n  margin-right: 0.82rem;\r\n  transition: 0.5s;\r\n  border: 0;\r\n\r\n  outline: 0;\r\n\r\n  @media screen and (max-width: 800px) {\r\n    width: 100%;\r\n    margin: 0;\r\n    height: 5rem;\r\n  }\r\n`;\r\n\r\nexport { GenerateButton, SpinDiv, FlexContainer, Wrapper, Empty };\r\n","import styled, { keyframes } from \"styled-components\";\r\nimport React from \"react\";\r\n\r\nexport const SpinnerIcon = () => {\r\n  return (\r\n    <Container>\r\n      <Spinner />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst spin360 = keyframes`\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\n\r\nexport const Spinner = styled.div`\r\n  width: 10px;\r\n  height: 10px;\r\n\r\n  border: 2px solid purple;\r\n  border-bottom-color: rgba(0, 0, 0, 0);\r\n  border-radius: 50%;\r\n\r\n  animation: 1s linear infinite ${spin360};\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nconst HistoryHeader = styled.div`\r\n  padding-bottom: 0rem;\r\n  h1 {\r\n    font-size: 2.5rem;\r\n    font-family: \"Titillium Web\", sans-serif;\r\n  }\r\n`;\r\n\r\nconst HistoryContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 5rem;\r\n  height: 5rem;\r\n  border-top-left-radius: 0.2rem;\r\n  border-bottom-left-radius: 0.2rem;\r\n`;\r\n\r\nconst HiddenImg = styled.img`\r\n  width: 1rem;\r\n  display: none;\r\n  height: 1rem;\r\n`;\r\nconst LeftSection = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0rem;\r\n  justify-content: space-between;\r\n`;\r\nconst RightSection = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-right: 1rem;\r\n`;\r\nconst ViewButton = styled.button`\r\n  width: 7rem;\r\n  height: 3rem;\r\n  font-size: 1rem;\r\n  appearance: none;\r\n  outline: none;\r\n  shadow: none;\r\n  border: 1px solid #8925db;\r\n  border-radius: 0.2rem;\r\n  transition: 0s;\r\n\r\n  background-color: ${(props) =>\r\n    props.active ? \"#8925db\" : \"rgba(0,0,0,0)\"} !important;\r\n  color: ${(props) => (props.active ? \"white\" : \"#8925db\")};\r\n  font-weight: 600;\r\n\r\n  :hover {\r\n    background-color: #8925db !important;\r\n    color: white;\r\n    transition: 0.2s;\r\n    border: 0;\r\n  }\r\n`;\r\n\r\nconst Name = styled.h1`\r\n  font-size: 1.3rem;\r\n  font-weight: 500;\r\n  font-family: \"Titillium Web\", sans-serif;\r\n  padding-left: 1rem;\r\n`;\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  border-radius: 0.2rem;\r\n  height: 5rem;\r\n  align-item: center;\r\n  align-content: center;\r\n  border-top-left-radius: 0.2rem;\r\n  border-bottom-left-radius: 0.2rem;\r\n  margin: 0.5rem 0;\r\n  transition: 0.5s;\r\n  border: 1px solid #e6e6e6;\r\n\r\n  :hover {\r\n    box-shadow: 0 4px 20px 0 rgba(0, 0, 0, 0.1);\r\n  }\r\n`;\r\n\r\nexport {\r\n  Wrapper,\r\n  Name,\r\n  ViewButton,\r\n  RightSection,\r\n  LeftSection,\r\n  HiddenImg,\r\n  Image,\r\n  HistoryHeader,\r\n  HistoryContainer,\r\n};\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Wrapper,\r\n  LeftSection,\r\n  RightSection,\r\n  ViewButton,\r\n  HistoryHeader,\r\n  HistoryContainer,\r\n  Image,\r\n  Name,\r\n} from \"./elements\";\r\n\r\nexport const History = ({ children }) => {\r\n  return (\r\n    <HistoryContainer>\r\n      <HistoryHeader>\r\n        <h1>History</h1>\r\n      </HistoryHeader>\r\n      {children}\r\n    </HistoryContainer>\r\n  );\r\n};\r\n\r\nexport const HistoryItem = ({ active, name, image, id, selectCharacter }) => {\r\n  return (\r\n    <Wrapper>\r\n      <LeftSection>\r\n        <Image src={image} />\r\n        <Name>{name}</Name>\r\n      </LeftSection>\r\n      <RightSection>\r\n        <ViewButton active={active} onClick={() => selectCharacter(id)}>\r\n          {active ? \"Active\" : \"View\"}\r\n        </ViewButton>\r\n      </RightSection>\r\n    </Wrapper>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1.8fr;\r\n  grid-template-rows: 1fr;\r\n  grid-gap: 1.5rem;\r\n  padding-bottom: 3rem;\r\n  @media only screen and (max-width: 800px) {\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: 1fr 0.5fr;\r\n    // height: 100%;\r\n    padding-bottom: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst ImageWrapper = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nconst InfoSection = styled.div`\r\n  border-radius: 0.2rem;\r\n  height: 100%;\r\n`;\r\n\r\nconst InfoRow = styled.div`\r\n  * {\r\n    margin: 0;\r\n  }\r\n  align-items: center;\r\n  display: flex;\r\n  width: 100%;\r\n  height: 1.5rem;\r\n  padding: 0.5rem 0;\r\n  justify-content: space-between;\r\n  //   border-bottom: 1px solid ;\r\n  border-bottom: ${(props) => (!props.underline ? \"1px solid #e6e6e6\" : 0)};\r\n`;\r\nconst InfoData = styled.p`\r\n  font-size: 1rem;\r\n  font-weight: 300;\r\n`;\r\nconst InfoHeader = styled.h1`\r\n  font-size: 1rem;\r\n  font-family: \"Titillium Web\", sans-serif;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst InfoItem = ({ header, value, underline }) => {\r\n  return (\r\n    <InfoRow underline={underline}>\r\n      <InfoHeader>{header}</InfoHeader>\r\n      <InfoData>{valueFieldReducer(value)}</InfoData>\r\n    </InfoRow>\r\n  );\r\n};\r\n\r\nconst valueFieldReducer = (value) => {\r\n  if (!value) return \"Unknown\";\r\n  return value;\r\n};\r\n\r\nexport const CharacterDisplay = ({\r\n  img,\r\n  name,\r\n  id,\r\n  status,\r\n  prevImg,\r\n  species,\r\n  type,\r\n  gender,\r\n  loading,\r\n  origin,\r\n  character,\r\n  location,\r\n  created,\r\n}) => {\r\n  return (\r\n    <Wrapper>\r\n      <ImageWrapper>\r\n        <Image src={img} />\r\n      </ImageWrapper>\r\n\r\n      <InfoSection>\r\n        <InfoSectionContainer>\r\n          <NameHeader>\r\n            <h1>{name}</h1>\r\n            <p>CHARACTER ID: {id}</p>\r\n          </NameHeader>\r\n          <InfoContainer>\r\n            <InfoItem header={\"ID Number\"} value={id} />\r\n            <InfoItem header={\"Status\"} value={status} />\r\n            <InfoItem header={\"Species\"} value={species} />\r\n            <InfoItem header={\"Type\"} value={type} />\r\n            <InfoItem header={\"Gender\"} value={gender} />\r\n            <InfoItem header={\"Origin\"} value={origin} />\r\n            <InfoItem underline={true} header={\"Location\"} value={location} />\r\n          </InfoContainer>\r\n        </InfoSectionContainer>\r\n      </InfoSection>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst InfoSectionContainer = styled.div`\r\n  border: 1px solid #e6e6e6;\r\n  border-radius: 0.2rem;\r\n`;\r\n\r\nconst InfoContainer = styled.div`\r\n  padding: 1rem;\r\n`;\r\n\r\nconst NameHeader = styled.div`\r\n  padding: 1rem 1rem;\r\n  h1 {\r\n    margin: 0;\r\n    font-size: 1.2rem;\r\n    font-family: \"Titillium Web\", sans-serif;\r\n    padding: 0;\r\n    padding-bottom: 0.3rem;\r\n  }\r\n  p {\r\n    font-size: 0.7rem;\r\n    margin: 0;\r\n    color: grey;\r\n    font-weight: 600;\r\n  }\r\n\r\n  padding-bottom: 1.2rem;\r\n\r\n  border-bottom: 1px solid #e6e6e6;\r\n`;\r\n\r\nconst HiddenImg = styled.img`\r\n  width: 1rem;\r\n  display: none;\r\n  height: 1rem;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  border-radius: 0.2rem;\r\n  width: auto;\r\n  min-width: 20rem;\r\n  max-width: 35rem;\r\n  width: 100%;\r\n\r\n  @media only screen and (max-width: 800px) {\r\n    widht: 100%;\r\n    min-width: 100%;\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useLazyQuery } from \"@apollo/client\";\r\n\r\nimport { GET_CHARACTER } from \"./graphql/queries\";\r\nimport {\r\n  FlexContainer,\r\n  Empty,\r\n  GenerateButton,\r\n  SpinDiv,\r\n  Wrapper,\r\n} from \"./elements\";\r\n\r\nimport { SpinnerIcon } from \"../spinner/Spinner\";\r\nimport { History, HistoryItem } from \"../history/index\";\r\nimport { CharacterDisplay } from \"../character/index\";\r\n\r\nexport const Generator = ({ characterCount }) => {\r\n  let [history, setHistory] = useState([]);\r\n  let [cache, setCache] = useState({});\r\n  let [character, setCharacter] = useState(null);\r\n\r\n  let [getCharacter, { loading, error, data }] = useLazyQuery(GET_CHARACTER);\r\n\r\n  const scrollTop = () => {\r\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n  };\r\n\r\n  //save query result to local state\r\n  useEffect(() => {\r\n    if (!loading && data) {\r\n      let { character } = data;\r\n\r\n      //update character\r\n      setCharacter(character);\r\n\r\n      //add result to history\r\n      setHistory((prev) => {\r\n        let copy = [...prev];\r\n        copy.unshift(character);\r\n        return copy;\r\n      });\r\n\r\n      //cache not necessary since graphql caches queries automatically\r\n      //add character to cache\r\n      setCache((prev) => {\r\n        let copy = { ...prev };\r\n        copy[character.id] = character;\r\n        return copy;\r\n      });\r\n    }\r\n  }, [data, loading]);\r\n\r\n  if (error) return <h1>Error Connecting to Server</h1>;\r\n\r\n  //generate ID from max num\r\n  const generateID = (totalCharacters) => {\r\n    let id = Math.floor(Math.random() * totalCharacters + 1);\r\n    return id;\r\n  };\r\n\r\n  //execute lazy query on click\r\n  const fetchCharacter = () => {\r\n    console.log(characterCount);\r\n    let id = generateID(characterCount);\r\n\r\n    //don't update if previously generated\r\n    if (cache[id]) {\r\n      setCharacter(cache[id]);\r\n      scrollTop();\r\n      return;\r\n    }\r\n\r\n    //else execute lazy query\r\n    getCharacter({ variables: { id } });\r\n  };\r\n\r\n  //select character from history item\r\n  const selectCharacter = (id) => {\r\n    setCharacter(cache[id]);\r\n    scrollTop();\r\n  };\r\n\r\n  //render History Items\r\n  const historyItems = history.map(({ id, image, name }, index) => {\r\n    return (\r\n      <HistoryItem\r\n        key={id}\r\n        id={id}\r\n        active={id == character.id}\r\n        image={image}\r\n        name={name}\r\n        selectCharacter={selectCharacter}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Wrapper>\r\n      <FlexContainer>\r\n        {character ? (\r\n          <CharacterDisplay\r\n            name={character.name}\r\n            img={character.image}\r\n            id={character.id}\r\n            location={character.location.name}\r\n            species={character.species}\r\n            status={character.status}\r\n            origin={character.origin.name}\r\n            gender={character.gender}\r\n            type={character.type}\r\n          />\r\n        ) : (\r\n          <Empty>Click Generate to load a character</Empty>\r\n        )}\r\n\r\n        <SpinDiv>\r\n          <GenerateButton\r\n            disabled={loading ? true : false}\r\n            onClick={() => fetchCharacter()}\r\n          >\r\n            {loading ? <SpinnerIcon /> : \"GENERATE\"}\r\n          </GenerateButton>\r\n        </SpinDiv>\r\n        <History>{historyItems}</History>\r\n      </FlexContainer>\r\n    </Wrapper>\r\n  );\r\n};\r\n","import { gql } from \"@apollo/client\";\r\n\r\nconst GET_CHAR_COUNT = gql`\r\n  query {\r\n    characters {\r\n      info {\r\n        pages\r\n        count\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport { GET_CHAR_COUNT };\r\n","import { useQuery } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { Generator } from \"../../views/generator/components/main\";\r\nimport { GET_CHAR_COUNT } from \"./queries\";\r\n\r\nexport const Wrapper = () => {\r\n  let { data, loading, error } = useQuery(GET_CHAR_COUNT);\r\n\r\n  if (error) return <h1>Error connecting to Server</h1>;\r\n  if (loading) return null;\r\n\r\n  return <Generator characterCount={data.characters.info.count} />;\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport { Wrapper } from \"./components/wrapper\";\n\nconst client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Wrapper />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}